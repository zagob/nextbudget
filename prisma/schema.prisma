generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  AccountBanks AccountBanks[]
  Categories   Categories[]
  Transactions Transactions[]
  Transfers    Transfers[]

  subscription Subscription?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum BANKS {
  BANCO_DO_BRASIL
  ITAU
  ITI
  PICPAY
  NUBANK
  BRADESCO
  SANTANDER
  CAIXA
  INTER
  C6
  PAGSEGURO
  MERCADOPAGO
  STONE
  GETNET
  SAFRA
  BANRISUL
  SICOOB
  SICREDI
  OUTROS
}

enum Type {
  INCOME
  EXPENSE
}

model AccountBanks {
  id            String         @id @default(cuid())
  disabled      Boolean?       @default(false)
  bank          BANKS
  description   String
  amount        Int
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  deletedAt     DateTime?
  Transactions  Transactions[]
  TransfersFrom Transfers[]    @relation("SourceBank")
  TransfersTo   Transfers[]    @relation("DestinationBank")

  @@map("account_banks")
}

model Categories {
  id    String  @id @default(cuid())
  name  String
  type  Type    @default(EXPENSE)
  color String
  icon  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  deletedAt    DateTime?
  Transactions Transactions[]

  @@map("categories")
}

model Transactions {
  id          String   @id @default(cuid())
  date        DateTime
  type        Type     @default(EXPENSE)
  description String?
  amount      Int

  accountBankId String
  bank          AccountBanks @relation(fields: [accountBankId], references: [id])
  categoryId    String
  category      Categories   @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  deletedAt DateTime?

  @@map("transactions")
}

model Transfers {
  id          String   @id @default(cuid())
  date        DateTime
  amount      Int
  description String?

  sourceBankId      String
  sourceBank        AccountBanks @relation(name: "SourceBank", fields: [sourceBankId], references: [id])
  destinationBankId String
  destinationBank   AccountBanks @relation(name: "DestinationBank", fields: [destinationBankId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  deletedAt DateTime?

  @@map("transfers")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
}

enum PlanType {
  FREE
  PRO
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

model Subscription {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  planType     PlanType           @default(FREE)
  status       SubscriptionStatus @default(ACTIVE)
  billingCycle BillingCycle?

  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?

  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?

  maxAccountBanks Int @default(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
